###状态管理类


1.什么是状态管理?
  将浏览器与web服务器之间多次交互当作一个整体来处理,并且将多次交互所涉及的数据(状态)保存下来.
2.如何进行状态管理?
  方式一:将状态保存在浏览器端(Cookie)
  方式二:将状态保存在服务器端(Session)

3.Cookie
  1)什么是Cookie?
    服务器临时存放在浏览器端的少量数据.
    >当浏览器访问服务器时,服务器会将少量数据以set-cookie消息头的形式发送给浏览器.浏览器会将这些数据临时保存下来.
    >当浏览器再次访问服务器时,会将这些数据以cookie消息头的形式发送给服务器.
  2)添加Cookie
    Cookie cookie = new Cookid(String name,String value); Cookie只能存放字符串.
    response.addCookie(cookie);
  3)读取Cookie(请求)
    Cookie[] cookies = request.getCookies();
  4)Cookie生存时间
    a.默认情况下,浏览器会将Cookie保存在内存里面.(浏览器只要不关闭,Cookie会一直存在,当浏览器关闭时,Cookid会被删除).
    b.可以调用setMaxAge()方法来设置Cookie的生存时间.cookie.setMaxAge(int seconds);
      seconds > 0: 浏览器会将cookie保存在硬盘上,当超过指定的时间浏览器会将cookie删除.
      seconds < 0: 默认值,浏览器会将cookie保存在内存里面.关闭浏览器会删除.
      seconds = 0: 浏览器会将该cookie立即删除.(要删除一个cookie,设置其setMaxAge()值为0,再response.addCookie(c)).
  5)Cookie的编码问题
    a.Cookie只能保存合法的ascii字符.如果是中文,需要将中文转化为相应的ascii字符的形式.
    解决方法: 
    >在添加Cookie时,使用encode方法将中文转换成合法的ascii字符(URLEncoder.encode(String str,"utf-8")),不管是不是中文,建议使用encode方法处理
    >在读取Cookie时,使用decode方法将ascii字符转换成中文(URLDecoder.decode(String str,"utf-8"))转换成中文
  6)Cookie的路径问题
    a.什么是Cookie路径问题?
      浏览器在向服务器上某个地址发送请求时,会比较该地址是否符合Cookie路径的要求,只有符合要求的Cookie才会发送给服务器.
    b.Cookie的默认路径?
      Cookie的默认路径等于添加该Cookie的web组件的路径.(如/aaa/bbb/test.jsp添加了一个Cookie,则Cookie的默认路径就是'/aaa/bbb')
    c.匹配规则
      请求地址要么等于Cookie的路径,要么时Cookie的子路径
    d.修改Cookie的默认路径
      cookie.setPath(String path);
  7)Cookie的限制
    a.可能被用户禁止
    b.不安全.因为Cookie保存在浏览器端,并且不会加密,所以,对于敏感数据,如果一定要以Cookie的方式保存在浏览器端,一定要加密.
    c.大小有限制(Cookie只能保存约4K左右的数据)
    d.数量有限制(大约几百个)
    e.只能存放字符串
    
    
    
    
    
    
### Session(会话)
1.Session?
   服务端为了保存用户状态而创建的一个特殊的对象.当浏览器访问服务器时,服务器创建一个Session对象(该对象有一个唯一的id,称之为SessionId),接下来,服务器    会将SessionId以Cookie的方式发送给浏览器.当浏览器再次访问服务器时,会将SessionId发送过来,服务器依据SessionId找到对应的Session对象.
   方式1. HttpSession session = request.getSession(boolean flag); HttpSession是一个接口
         >flag为true时: 先查看请求当中有没有SessionId,如果没有,则创建一个符合HttpSession接口要求的对象,即Session对象.如果有SessionId,则依据                             SessionId查找对应的Session对象,如果找到了,则返回该对象,如果找不到则创建一个新的Session对象.
         >flag为false:  先查看请求当前有没有sessionId,如果没有,返回null,如果有sessionId,则依据sessionId查找相对应的Session对象,如果找到了,则返                         回该对象,找不到返回null
   
   方式2. HttpSession session = request.getSession(); 等价于request.getSession(true)
         >session.getId(); 获取sessionId
         >session.setAttribute(String name,Object obj);
         >Object session = session.getAttribute(String name);
   
   
  
  
    
      
      
     
















